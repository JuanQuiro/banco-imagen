generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modelo de usuario, necesario para NextAuth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  imagenes      ImagenDestacada[]
  videos        VideoDestacado[]
}

// Modelo para almacenar imágenes destacadas
model ImagenDestacada {
  id          Int       @id @default(autoincrement())
  src         String    // URL o ruta de la imagen
  alt         String    // Texto alternativo
  titulo      String?   // Título de la imagen
  descripcion String?   // Descripción corta de la imagen
  categoria   Categoria @relation(fields: [categoriaId], references: [id]) // Relación con la categoría
  categoriaId Int
  size        Int       // Tamaño de la imagen en bytes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  uploadedBy  User      @relation(fields: [uploadedById], references: [id])
  uploadedById String

  // Relación muchos a muchos con etiquetas
  etiquetas   ImagenEtiqueta[]

  // Relación inversa con Destacado
  destacados  Destacado[] @relation("ImagenDestacadoRel")

  @@index([src, categoriaId])
}

// Modelo para almacenar videos destacados
model VideoDestacado {
  id          Int       @id @default(autoincrement())
  src         String    // URL o ruta del video
  alt         String    // Texto alternativo
  titulo      String?   // Título del video
  descripcion String?   // Descripción corta del video
  size        Int       // Tamaño del video en bytes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  uploadedBy  User      @relation(fields: [uploadedById], references: [id])
  uploadedById String

  // Relación inversa con Destacado
  destacados  Destacado[] @relation("VideoDestacadoRel")

  @@unique([src]) // Asegura que cada video tenga una URL única
}

// Modelo intermedio para la relación muchos a muchos entre ImagenDestacada y Etiqueta
model ImagenEtiqueta {
  imagenId   Int
  etiquetaId Int
  imagen     ImagenDestacada @relation(fields: [imagenId], references: [id], onDelete: Cascade)
  etiqueta   Etiqueta        @relation(fields: [etiquetaId], references: [id], onDelete: Cascade)

  @@id([imagenId, etiquetaId]) // Clave compuesta
}

// Modelo de categorías para clasificar imágenes
model Categoria {
  id          Int       @id @default(autoincrement())
  nombre      String    @unique
  descripcion String?
  imagenes    ImagenDestacada[]
}

// Modelo de etiquetas para filtrar y clasificar imágenes
model Etiqueta {
  id       Int            @id @default(autoincrement())
  nombre   String         @unique
  imagenes ImagenEtiqueta[]
}

// Modelo necesario para NextAuth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy User     @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Modelo para almacenar elementos destacados
model Destacado {
  id           Int      @id @default(autoincrement())
  tipo         String   // "IMAGEN" o "VIDEO"

  // Definir explícitamente las claves foráneas como opcionales
  imagenId     Int?     // ID de la imagen destacada (opcional)
  videoId      Int?     // ID del video destacado (opcional)

  orden        Int      // Para ordenar los destacados
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones opcionales con imágenes y videos
  imagen       ImagenDestacada? @relation("ImagenDestacadoRel", fields: [imagenId], references: [id], onDelete: Cascade)
  video        VideoDestacado?   @relation("VideoDestacadoRel", fields: [videoId], references: [id], onDelete: Cascade)

  // Asegúrate de que solo haya 5 destacados por tipo
  @@unique([tipo, orden])
}

